// Media Queries
=respond-to($media)
  @if $media == mobile
    @media only screen and (max-width: 767px)
      @content
  @else if $media == tablet
    @media only screen and (min-width: 768px) and (max-width: 979px)
      @content
  @else if $media == gte-tablet
    @media only screen and (min-width: 768px)
      @content  
  @else if $media == laptop
    @media only screen and (min-width: 980px) and (max-width: 1199px)
      @content
  @else if $media == gte-laptop
    @media only screen and (min-width: 980px)
      @content
  @else if $media == desktop
    @media only screen and (min-width: 1200px)
      @content


=devel
  %columns
    &:hover
      outline: 1px dashed #ccc


// LAYOUT
=alpha
  margin-left: 0
  
=omega($n: 1)
  @if $n == 1
    margin-right: 0
  @else
    &:nth-child(#{$n})
      margin-right: 0

=clearfix
  &:before, &:after
    display: table
    content: ""
    line-height: 0
  &:after
    clear: both

=grid($colWidth: 60px, $gutterWidth: 20px, $columns: 12)

  %container
    @if $colWidth == 0
      width: 90%
    @else
      width: ($colWidth * $columns) + ($gutterWidth * ($columns - 1))
    margin-left: auto
    margin-right: auto
    +clearfix

  %columns
    min-height: 1px // prevent collapsing columns
    margin-right: $gutterWidth
    float: left
    display: table
    border-collapse: collapse


  @for $i from 1 to ($columns + 1)
    %columns#{$i}
      @if $colWidth > 0
        /* columns#{$i} */
        width: ($colWidth * $i) + ($gutterWidth * ($i - 1))
      @else
        width: 100%

=span($x, $omega: 0)
  @extend %columns
  @extend %columns#{$x}
  @if $omega != 0
    +omega($omega)

%row
  clear: both
  display: inline-block

// UTILITY MIXINS
%pull-left
  // PULL LEFT
  float: left !important

%pull-right
  // PULL RIGHT
  float: right !important

%responsive-img
  /* Responsive images (ensure images don't scale beyond their parents) */
  max-width: 100% /* Part 1: Set a maxium relative to the parent */
  width: auto\9 /* IE7-8 need help adjusting responsive images */
  height: auto /* Part 2: Scale the height according to the width, otherwise you get stretching */
  vertical-align: middle
  border: 0
  -ms-interpolation-mode: bicubic


%input-block-level
  display: block
  width: 100%
  min-height: 30px // Make inputs at least the height of their button counterpart (base line-height + padding + border)
  -webkit-box-sizing: border-box
  -moz-box-sizing: border-box
  box-sizing: border-box

%hide-text
  font: 0/0 a
  color: transparent
  text-shadow: none
  background-color: transparent
  border: 0


// Common UI parts

%breadcrumb
  ul
    @extend %nav
    li
      padding-top: 10px
      padding-bottom: 10px
      &:before
        content: "/"
        position: relative
        top: 1px
      &:first-child:before
        content: " "
      a, span
        margin-left: 5px
        margin-right: 5px

%nav
  li
    float: left

=btn($background-color, $color)
  padding: 5px 10px
  margin-top: 10px
  margin-bottom: 10px
  background-color: $background-color
  color: $color
  margin-right: 10px
  +border-radius(5px)
  &:hover,
  &:focus
    background-color: darken($background-color,20%)
    text-decoration: none

=tabs($font-size, $background-color, $color)
  border-bottom: 1px solid $background-color
  margin: 10px 0
  li
    margin-bottom: -1px
    a
      padding: 8px 10px
      line-height: $font-size // expecting px
      margin-right: 5px
      text-decoration: none
      border-bottom: 1px solid transparent
      color: $background-color
      +border-radius(4px 4px 0 0)
      &:hover, &:focus
        border-bottom: 1px solid $background-color
        background-color: darken($color,10%)
        color: $background-color

  > .active > a,
  > .active > a:hover,
  > .active > a:focus
    color: $color
    background-color: darken($background-color, 10%)
    cursor: default

=fieldset($border-color: #ccc)
  border: solid 1px $border-color
  padding: 10px
  margin: 10px 0
  legend
    font-weight: bold
    padding: 0 5px
    margin: 0

$prefixes: ("-webkit-","-moz-", "-o-", "")
@mixin selection($color, $background)
  @each $prefix in $prefixes
    ::#{$prefix}selection
      color: $color
      background: $background


// Font Awesome

@import "font-awesome-unicodes"

=font-awesome($path)
  @font-face
    font-family: 'FontAwesome'
    src: url('#{$path}/fontawesome-webfont.eot')
    src: url('#{$path}/fontawesome-webfont.eot?#iefix') format("embedded-opentype"), url('#{$path}/fontawesome-webfont.woff') format("woff"), url('#{$path}/fontawesome-webfont.ttf') format("truetype")
    font-weight: normal
    font-style: normal


=icon($i,$pos: "before")
  &:#{$pos}
    font-family: 'FontAwesome'
    display: inline-block
    text-decoration: inherit
    line-height: .9em
    @if $pos == "before"
      padding-right: 5px
    @else
      padding-left: 5px    
    text-decoration: none
    @extend %#{$i}
